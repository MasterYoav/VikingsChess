name: Build and Release

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            executable-ext: ".deb"
            executable-name: "VikingsChess_1.0.1_amd64.deb"
          - os: windows-latest
            platform: windows
            executable-ext: ".exe"
            executable-name: "VikingsChess-1.0.1.exe"
          - os: macos-latest
            platform: macos
            executable-ext: ".dmg"
            executable-name: "VikingsChess-1.0.1.dmg"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 23
      uses: actions/setup-java@v4
      with:
        java-version: '23'
        distribution: 'temurin'

    - name: Make gradlew executable
      run: chmod +x gradlew

    - name: Build application
      run: ./gradlew clean build

    - name: Create runtime image
      run: ./gradlew runtime

    - name: Create native executable
      run: ./gradlew jpackage

    - name: Find and rename executable (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd build/dist
        # Find the generated .deb file and rename it to our expected name
        mv *.deb ${{ matrix.executable-name }}
        ls -la
      shell: bash

    - name: Find and rename executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd build/dist
        # Find the generated .exe file and rename it to our expected name
        mv *.exe ${{ matrix.executable-name }}
        dir
      shell: bash

    - name: Find and rename executable (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cd build/dist
        # Find the generated .dmg file and rename it to our expected name
        mv *.dmg ${{ matrix.executable-name }}
        ls -la
      shell: bash

    - name: Upload executable to release
      run: |
        cd build/dist
        gh release upload ${{ github.event.release.tag_name }} ${{ matrix.executable-name }} --clobber
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
